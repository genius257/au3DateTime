#AutoIt3Wrapper_Run_AU3Check=N

#include-once
; https://github.com/forcedotcom/dataloader/blob/master/windows-dependencies/autoit/Include/Date.au3
#include <Date.au3>
#include <WinAPILocale.au3>
#include "DateTimeZone.au3"

Global Const $__g_DateTime_sTsFormat = '%04d-%02d-%02d %02d:%02d:%02d.%03d'
Global Const $__g_DateTime_sTsPattern = '^(\d{4})-(\d{2})-(\d{2}) (\d{2}):(\d{2}):(\d{2}).(\d{3})$'
Global Const $__g_DateTime_YEARS_PER_MILLENNIUM = 1000
Global Const $__g_DateTime_YEARS_PER_CENTURY = 100
Global Const $__g_DateTime_YEARS_PER_DECADE = 10
Global Const $__g_DateTime_MONTHS_PER_YEAR = 12
Global Const $__g_DateTime_MONTHS_PER_QUARTER = 3
Global Const $__g_DateTime_WEEKS_PER_YEAR = 52
Global Const $__g_DateTime_WEEKS_PER_MONTH = 4
Global Const $__g_DateTime_DAYS_PER_YEAR = 365
Global Const $__g_DateTime_DAYS_PER_WEEK = 7
Global Const $__g_DateTime_HOURS_PER_DAY = 24
Global Const $__g_DateTime_MINUTES_PER_HOUR = 60
Global Const $__g_DateTime_SECONDS_PER_MINUTE = 60
Global Const $__g_DateTime_MILLISECONDS_PER_MONUTE = 1000
Global Const $__g_DateTime_MICROSECONDS_PER_MILLISECOND = 1000
Global Const $__g_DateTime_MICROSECONDS_PER_SECOND = 1000000
Global Const $__g_DateTime_WEEK_DAY_AUTO = 'auto'
Global Enum $__g_DateTime_ts_year, $__g_DateTime_ts_month, $__g_DateTime_ts_day, $__g_DateTime_ts_hour, $__g_DateTime_ts_minute, $__g_DateTime_ts_second, $__g_DateTime_ts_millisecond
Global Enum $__g_DateTime_SUNDAY = 1, $__g_DateTime_MONDAY, $__g_DateTime_TUESDAY, $__g_DateTime_WEDNESDAY, $__g_DateTime_THURSDAY, $__g_DateTime_FRIDAY, $__g_DateTime_SATURDAY
Global $__g_DateTime_weekStartsAt = $__g_DateTime_MONDAY
Global $__g_DateTime_weekEndsAt = $__g_DateTime_SUNDAY
Global $__g_DateTime_weekendDays = [$__g_DateTime_SATURDAY, $__g_DateTime_SUNDAY]
Global $__g_DateTime_monthsOverflow = True
Global $__g_DateTime_yearsOverflow = True
Global $__g_DateTime_midDayAt = 12

Class DateTime
    $ts = Null
    $tz = Null

    Get Func year()
        Return $this.tsShards()[$__g_DateTime_ts_year]
        Return Int(StringMid($this.ts, 1, 4), 1)
    EndFunc

    Set Func year($value)
        Local $aShards = $this.tsShards()
        $this.setDate($value, $aShards[$__g_DateTime_ts_month], $aShards[$__g_DateTime_ts_day])
    EndFunc

    Get Func month()
        Return Int($this.tsShards()[$__g_DateTime_ts_month], 1)
    EndFunc

    Set Func month($value)
        Local $aShards = $this.tsShards()
        $this.setDate($aShards[$__g_DateTime_ts_year], $value, $aShards[$__g_DateTime_ts_day])
    EndFunc

    Get Func day()
        Return Int($this.tsShards()[$__g_DateTime_ts_day], 1)
    EndFunc

    Set Func day($value)
        Local $aShards = $this.tsShards()
        $this.setDate($aShards[$__g_DateTime_ts_year], $aShards[$__g_DateTime_ts_month], $value)
    EndFunc

    Get Func dayOfWeek()
        Local $aShards = $this.tsShards()
        Return _DateToDayOfWeek($aShards[$__g_DateTime_ts_year], $aShards[$__g_DateTime_ts_month], $aShards[$__g_DateTime_ts_day])
    EndFunc

    Get Func dayOfWeekIso()
        Local $aShards = $this.tsShards()
        Return _DateToDayOfWeekISO($aShards[$__g_DateTime_ts_year], $aShards[$__g_DateTime_ts_month], $aShards[$__g_DateTime_ts_day])
    EndFunc

    Get Func dayOfYear()
        Local $aShards = $this.tsShards()
        Local $iDay = 0
        Local $i
        For $i = 1 To $aShards[$__g_DateTime_ts_month]-1 Step +1
            $iDay += _DateDaysInMonth($aShards[$__g_DateTime_ts_year], $i)
        Next
        $iDay += $aShards[$__g_DateTime_ts_day]
        Return $iDay
    EndFunc

    Set Func dayOfYear($value)
        Local $aShards = $this.tsShards()
        Local $month = 1
        Local $mDays = 0
        Do
            $value -= $mDays
            $mDays = _DateDaysInMonth($aShards[$__g_DateTime_ts_year], $month)
            $month += 1
        Until $mDays >= $value
        $this.setDate($aShards[$__g_DateTime_ts_year], $month - 1, $value)
    EndFunc

    Get Func daysInMonth()
        Local $aShards = $this.tsShards()
        Return _DateDaysInMonth($aShards[$__g_DateTime_ts_year], $aShards[$__g_DateTime_ts_month])
    EndFunc

    Get Func dst()
        Local $tz = $this.tz
        If Not $tz.tz.DynamicDaylightTimeDisabled Then Return False
        Local $aShards = $this.tsShards()
        Local $tStart = $tz.daylightDate
        $tStart.Year = $aShards[$__g_DateTime_ts_year]
        Local $sStart = _Date_Time_SystemTimeToDateTimeStr($tStart, 1)
        Local $tEnd = $tz.standardDate
        $tEnd.Year = $aShards[$__g_DateTime_ts_year]
        Local $sEnd = _Date_Time_SystemTimeToDateTimeStr($tEnd, 1)
        Local $sDate = StringFormat('%04d/%02d/%02d %02d:%02d:%02d', $aShards[$__g_DateTime_ts_year], $aShards[$__g_DateTime_ts_month], $aShards[$__g_DateTime_ts_day], $aShards[$__g_DateTime_ts_hour], $aShards[$__g_DateTime_ts_minute], $aShards[$__g_DateTime_ts_second])
        $iStart = _DateDiff('s', $sStart, $sDate)
        $iEnd = _DateDiff('s', $sDate, $sEnd)

        If $iStart < 0 Or $iEnd < 0 Then Return False
        Return True

        ;_date_isBetween($this.toDateTimeString(), )
        ;Return $this.isBetween($this.tz.getDstStart(), $this.tz.getDstEnd())
        ;FIXME
        ; GetTimeZoneInformation
        ; https://docs.microsoft.com/en-us/windows/win32/api/timezoneapi/nf-timezoneapi-gettimezoneinformation
    EndFunc

    Get Func hour()
        Return Int($this.tsShards()[$__g_DateTime_ts_hour], 1)
    EndFunc

    Set Func hour($value)
        Local $aShards = $this.tsShards()
        $this.setTime($value, $aShards[$__g_DateTime_ts_minute], $aShards[$__g_DateTime_ts_second], $aShards[$__g_DateTime_ts_millisecond])
    EndFunc

    Get Func minute()
        Return Int($this.tsShards()[$__g_DateTime_ts_minute], 1)
    EndFunc

    Set Func minute($value)
        Local $aShards = $this.tsShards()
        $this.setTime($aShards[$__g_DateTime_ts_hour], $value, $aShards[$__g_DateTime_ts_second], $aShards[$__g_DateTime_ts_millisecond])
    EndFunc

    Get Func second()
        Return Int($this.tsShards()[$__g_DateTime_ts_second], 1)
    EndFunc

    Set Func second($value)
        Local $aShards = $this.tsShards()
        $this.setTime($aShards[$__g_DateTime_ts_hour], $aShards[$__g_DateTime_ts_minute], $value, $aShards[$__g_DateTime_ts_millisecond])
    EndFunc

    Get Func millisecond()
        Return $this.tsShards()[$__g_DateTime_ts_millisecond]
    EndFunc

    Set Func millisecond($value)
        Local $aShards = $this.tsShards()
        $this.setTime($aShards[$__g_DateTime_ts_hour], $aShards[$__g_DateTime_ts_minute], $aShards[$__g_DateTime_ts_second], $value)
    EndFunc

    Get Func timestamp()
        Local $aShards = $this.tsShards()
        Local $aSysTimeInfo = _Date_Time_GetTimeZoneInformation()
        Local $utcTime = ""

        If Int($aShards[$__g_DateTime_ts_year], 1) < 1970 Then Return SetError(1, 0, -1)

        Local $sDate = StringFormat('%04d/%02d/%02d %02d:%02d:%02d', $aShards[$__g_DateTime_ts_year], $aShards[$__g_DateTime_ts_month], $aShards[$__g_DateTime_ts_day], $aShards[$__g_DateTime_ts_hour], $aShards[$__g_DateTime_ts_minute], $aShards[$__g_DateTime_ts_second])

        If $aSysTimeInfo[0] = 2 Then ; if daylight saving time is active
            $utcTime = _DateAdd('n', $aSysTimeInfo[1] + $aSysTimeInfo[7], $sDate) ; account for time zone and daylight saving time
        Else
            $utcTime = _DateAdd('n', $aSysTimeInfo[1], $sDate) ; account for time zone
        EndIf

        Return _DateDiff('s', "1970/01/01 00:00:00", $utcTime)
    EndFunc

    Set Func timestamp()
        ;FIXME
    EndFunc

    Get Func timezone()
        ;FIXME
    EndFunc

    Set Func timezone()
        ;FIXME
    EndFunc

    Get Func utc()
        ;FIXME
    EndFunc

    Set Func utc()
        ;FIXME
    EndFunc

    Get Func weekNumberInMonth()
        Local $aShards = $this.tsShards()
        Return Ceiling(($aShards[$__g_DateTime_ts_day] + _DateToDayOfWeekISO($aShards[$__g_DateTime_ts_year], $aShards[$__g_DateTime_ts_month], 1) - 1) / $__g_DateTime_DAYS_PER_WEEK)
    EndFunc

    Get Func weekOfMonth()
        Return Ceiling($this.day / $__g_DateTime_DAYS_PER_WEEK)
        ;Local $aShards = $this.tsShards()
        ;Local $first = _WeekNumberISO($aShards[$__g_DateTime_ts_year], $aShards[$__g_DateTime_ts_month], 1)
        ;Local $time = _WeekNumberISO($aShards[$__g_DateTime_ts_year], $aShards[$__g_DateTime_ts_month], $aShards[$__g_DateTime_ts_day])
        ;Local $first = _WeekNumber($aShards[$__g_DateTime_ts_year], $aShards[$__g_DateTime_ts_month], 1)
        ;Local $time = _WeekNumber($aShards[$__g_DateTime_ts_year], $aShards[$__g_DateTime_ts_month], $aShards[$__g_DateTime_ts_day])
        ;Return $time - $first + 1
    EndFunc

    Get Func weekOfYear()
        Local $aShards = $this.tsShards()
        Return _WeekNumberISO($aShards[$__g_DateTime_ts_year], $aShards[$__g_DateTime_ts_month], $aShards[$__g_DateTime_ts_day])
    EndFunc

    Get Func yearIso()
        Local $aShards = $this.tsShards()
        Return (_WeekNumberISO($aShards[$__g_DateTime_ts_year], $aShards[$__g_DateTime_ts_month], $aShards[$__g_DateTime_ts_day]) < 10 And $aShards[$__g_DateTime_ts_month] == 12) ? $aShards[$__g_DateTime_ts_year]+1 : Int($aShards[$__g_DateTime_ts_year], 1)
    EndFunc

    Get Func century()
        Local $factor = 1
        Local $year = $this.year
        If ($year < 0) Then
            $year = -$year
            $factor = -1
        EndIf

        Return $factor * Ceiling($year / $__g_DateTime_YEARS_PER_CENTURY)
    EndFunc

    Get Func decade()
        Local $aShards = $this.tsShards()
        Return Ceiling($aShards[$__g_DateTime_ts_year] / $__g_DateTime_YEARS_PER_DECADE)
    EndFunc

    Get Func quarter()
        Local $aShards = $this.tsShards()
        Return Ceiling($aShards[$__g_DateTime_ts_month] / $__g_DateTime_MONTHS_PER_QUARTER)
    EndFunc

    Get Func millennium()
        Local $factor = 1
        Local $year = $this.year
        If ($year < 0) Then
            $year = -$year
            $factor = -1
        EndIf

        Return $factor * Ceiling($year / $__g_DateTime_YEARS_PER_MILLENNIUM)
    EndFunc

    Get Func daysInYear()
        Return $this.isLeapYear() ? 366 : 365
    EndFunc

    Get Func age()
        Return $this.diffInYears()
    EndFunc

    Get Func localeDayOfWeek()
        Return $this.formatLocalized('dddd')
    EndFunc

    Get Func shortLocaleDayOfWeek()
        Return $this.formatLocalized('ddd')
    EndFunc

    Get Func localeMonth()
        Return $this.formatLocalized('MMMM')
    EndFunc

    Get Func shortLocaleMonth()
        Return $this.formatLocalized('MMM')
    EndFunc

    Func __construct($ts = 'now')
        ;$ts = $ts == 'now' ? _Now() : _DateTimeFormat($ts, 0)
        $ts = $ts == 'now' ? StringFormat($__g_DateTime_sTsFormat, @YEAR, @MON, @MDAY, @HOUR, @MIN, @SEC, @MSEC) : _DateTimeFormat($ts, 0)

        $this.ts = $ts
        $this.tz = DateTimeZone()
    EndFunc

    #cs
    Func __destruct()
        ; Destructor code here.
    EndFunc
    #ce

    Func tsShards()
        Return StringRegExp($this.ts, $__g_DateTime_sTsPattern, 1)
    EndFunc

    #cs
    # @param DateInterval $value
    #ce
    Func add($unit, $value = 1, $overflow = False)

        If IsNumber($unit) Then
            Local $tmp = $unit
            $unit = $value
            $value = $unit
        EndIf

        Local $aShards = $this.tsShards()
        Local $sDate = StringFormat('%04d/%02d/%02d %02d:%02d:%02d', $aShards[$__g_DateTime_ts_year], $aShards[$__g_DateTime_ts_month], $aShards[$__g_DateTime_ts_day], $aShards[$__g_DateTime_ts_hour], $aShards[$__g_DateTime_ts_minute], $aShards[$__g_DateTime_ts_second])
        Switch ($unit)
            Case 'year'
                $sDate = _DateAdd('Y', $value, $sDate)
            Case 'month'
                $sDate = _DateAdd('M', $value, $sDate)
            Case 'day'
                $sDate = _DateAdd('D', $value, $sDate)
            Case 'week'
                $sDate = _DateAdd('w', $value, $sDate)
            Case 'hour'
                $sDate = _DateAdd('h', $value, $sDate)
            Case 'minute'
                $sDate = _DateAdd('n', $value, $sDate)
            Case 'second'
                $sDate = _DateAdd('s', $value, $sDate)
            Case 'millisecond'
                ;FIXME
                ;_DateAdd('w', $value, $sDate)
            Case Else
                Return SetError(1, 1, False)
        EndSwitch
        Local $day = Int($aShards[$__g_DateTime_ts_day], 1)
        Local $aDate, $aTime
        _DateTimeSplit($sDate, $aDate, $aTime)
        If $overflow And $aDate[3] < $day Then
            $sDate = _DateAdd('D', $day - $aDate[3], $sDate)
            _DateTimeSplit($sDate, $aDate, $aTime)
        EndIf

        $this.setDateTime($aDate[1], $aDate[2], $aDate[3], $aTime[1], $aTime[2], $aTime[3], $aShards[$__g_DateTime_ts_millisecond])
    EndFunc

    Func addCenturies($value)
        $this.addYears($__g_DateTime_YEARS_PER_CENTURY * $value)
    EndFunc

    Func addCentury($value = 1)
        $this.addCenturies($value)
    EndFunc

    Func subCenturies($value)
        $this.addCenturies(-1 * $value)
    EndFunc

    Func subCentury($value = 1)
        $this.subCenturies($value)
    EndFunc

    Func addDay($value = 1)
        $this.addDays($value)
    EndFunc

    Func addDays($value)
        $this.add('day', $value)
    EndFunc

    Func subDay($value = 1)
        $this.subDays($value)
    EndFunc

    Func subDays()
        $this.addDays(-1 * $value)
    EndFunc

    Func addHour($value = 1)
        $this.addHours($value)
    EndFunc

    Func addHours($value)
        $this.add('hour', $value)
    EndFunc

    Func addMinute($value = 1)
        $this.addMinutes($value)
    EndFunc

    Func addMinutes($value)
        $this.add('second', $value)
    EndFunc

    Func addMonth($value = 1)
        $this.addMonths($value)
    EndFunc

    Func addMonthNoOverflow($value = 1)
        $this.addMonthsNoOverflow($value)
    EndFunc

    Func addMonths($value)
        If ($__g_DateTime_yearsOverflow) Then
            Return $this.addMonthsWithOverflow($value)
        EndIf

        $this.addMonthsNoOverflow($value)
    EndFunc

    Func addMonthsNoOverflow($value)
        $this.add('month', $value, False)
    EndFunc

    Func addMonthsWithOverflow($value)
        $this.add('month', $value, True)
    EndFunc

    Func addMonthWithOverflow($value = 1)
        $this.addMonthsWithOverflow($value)
    EndFunc

    Func addQuarter($value = 1)
        $this.addQuarters($value)
    EndFunc

    Func addQuarters($value)
        $this.addMonths($__g_DateTime_MONTHS_PER_QUARTER * $value)
    EndFunc

    Func addRealHour()
        ;FIXME
    EndFunc

    Func addRealHours()
        ;FIXME
    EndFunc

    Func addRealMinute()
        ;FIXME
    EndFunc

    Func addRealMinutes()
        ;FIXME
    EndFunc

    Func addRealSecond()
        ;FIXME
    EndFunc

    Func addRealSeconds()
        ;FIXME
    EndFunc

    Func addSecond($value = 1)
        $this.addSeconds($value)
    EndFunc

    Func addSeconds($value)
        $this.add('second', $value)
    EndFunc

    Func addWeek($value = 1)
        $this.addWeeks($value)
    EndFunc

    Func addWeeks($value)
        $this.add('week', $value)
    EndFunc

    Func subWeek($value = 1)
        $this.subWeeks($value)
    EndFunc

    Func subWeeks($value)
        $this.addWeeks(-1 * $value)
    EndFunc

    Func addWeekday($value = 1)
        $this.addWeekdays($value)
    EndFunc

    Func addWeekdays($value)
        Return SetError(1, 1, 0)
        ;FIXME: implement
        $dow = $this.dayOfWeekIso
        $offset = $dow < 6 ? 8 - $dow : 0
        $extraDaysToAdd = Floor($value / 7) * 2
        $value = $value + $extraDaysToAdd + $offset ;and something with the dow offset

        $this.add('day', $value)
    EndFunc

    Func addYear($value = 1)
        $this.addYears($value)
    EndFunc

    Func addYearNoOverflow($value = 1)
        $this.addYearsNoOverflow($value)
    EndFunc

    Func addYears($value)
        If ($__g_DateTime_yearsOverflow) Then
            Return $this.addYearsWithOverflow($value)
        EndIf

        $this.addYearsNoOverflow($value)
    EndFunc

    Func addYearsNoOverflow($value)
        ;$this.addMonthsNoOverflow($value * $__g_DateTime_MONTHS_PER_YEAR)
        $this.add('year', $value, False)
    EndFunc

    Func addYearsWithOverflow($value)
        $this.add('year', $value, True)
    EndFunc

    Func addYearWithOverflow($value = 1)
        $this.addYearsWithOverflow($value)
    EndFunc

    Func copy()
        Local $clone = DateTime()
        $clone.ts = $this.ts
        $clone.tz = $this.tz
        Return $clone
    EndFunc

    Func format($format)
        Local $lastMatchAt = 1, $matchAt = 1, $matches, $result = ""
        While 1
            $matches = StringRegExp($format, '(?<!\\)(?:\\\\)*([dDjlNSwzWFmMntLoXxYyaABgGhHisuveIOPpTZcrU])', 1, $lastMatchAt)
            If @error <> 0 Then ExitLoop
            $matchAt = @extended
            $result &= StringMid($format, $lastMatchAt, $matchAt - $lastMatchAt - 1)
            $lastMatchAt = $matchAt
            Switch $matches[0]
                Case 'a'; A and a
                    ;A: Uppercase Ante meridiem and Post meridiem
                    ;a: Lowercase Ante meridiem and Post meridiem
                    $result &= ($matches[0] == 'a' ? StringLower : StringUpper)($this.hour < 12 ? 'am' : 'pm')
                Case 'B'
                    ;B: Swatch Internet time
                    Return SetError(1, 0, 0); FIXME: implement
                Case 'c'
                    ;c: ISO 8601 date
                    Return SetError(1, 0, 0); FIXME: implement tz handling (getTimezone()...)
                    $result &= StringFormat('%04d-%02d-%02dT%02d:%02d:%02d+%02d:%02d', $this.year, $this.month, $this.day, $this.hour, $this.minute, $this.second);, $this.tzOffsetHours, $this.tzOffsetMinutes)
                Case 'd'; D and d
                    ;D: A textual representation of a day, three letters.
                    ;d: Day of the month, 2 digits with leading zeros.
                    $result &= $matches[0] == 'd' ? StringFormat('%02d', $this.day) : $this.dayOfWeek
                Case 'e'
                    ;e: Timezone identifier
                    Return SetError(1, 0, 0); FIXME: implement
                Case 'F'
                    ;F: A full textual representation of a month, such as January or March.
                    Return SetError(1, 0, 0); FIXME: implement
                Case 'g'; G and g
                    ;g: 12-hour format of an hour without leading zeros
                    ;G: 24-hour format of an hour without leading zeros
                    $result &= $matches[0] == 'g' ? Mod($this.hour , 12) : $this.hour
                Case 'h'; H and h
                    ;h: 12-hour format of an hour with leading zeros
                    ;H: 24-hour format of an hour with leading zeros
                    $result &= StringFormat('%02d', $matches[0] == 'h' ? Mod($this.hour , 12) : $this.hour)
                Case 'i'; I and i
                    ;i: Minutes with leading zeros
                    ;I: Whether or not the date is in daylight saving time
                    $result &= $matches[0] == 'i' ? StringFormat('%02d', $this.minute) : ($this.isDst() ? 1 : 0)
                Case 'j'
                    ;j: Day of the month without leading zeros
                    $result &= $this.day
                Case 'l'; L and l
                    ;l: A full textual representation of the day of the week
                    ;L: Whether it's a leap year
                    $result &= $matches[0] == 'l' ? $__g_DateTime_days[$this.dayOfWeek] : ($this.isLeapYear ? 1 : 0)
                Case 'm'; M and m
                    ;m: Numeric representation of a month, with leading zeros
                    ;M: A short textual representation of a month, three letters
                    If ($matches[0] == 'm') Then
                        $result &= StringFormat('%02d', $this.month)
                    Else
                        Return SetError(1, 0, 0); FIXME: implement
                    EndIf
                Case 'n'; N and n
                    ;n: Numeric representation of a month, without leading zeros
                    ;N: ISO 8601 numeric representation of the day of the week
                    $result &= $matches[0] == 'n' ? $this.month : $this.dayOfWeekIso
                Case 'o'; O and o
                    ;o: ISO 8601 week-numbering year. This has the same value as Y, except that if the ISO week number (W) belongs to the previous or next year, that year is used instead.
                    ;O: Difference to Greenwich time (GMT) without colon between hours and minutes
                    Return SetError(1, 0, 0); FIXME: implement
                Case 'p'; P and p
                    ;p: The same as P, but returns Z instead of +00:00 (available as of PHP 8.0.0)
                    ;P: Difference to Greenwich time (GMT) with colon between hours and minutes
                    Return SetError(1, 0, 0); FIXME: implement
                Case 'r'
                    ;r: » RFC 2822/» RFC 5322 formatted date
                    Return SetError(1, 0, 0); FIXME: implement
                Case 's'; S and s
                    ;S: English ordinal suffix for the day of the month, 2 characters.
                    ;s: Seconds with leading zeros.
                    $result &= $matches[0] == 's' ? StringFormat('%02d', $this.second) : $this.daySuffix
                Case 't'; T and t
                    ;t: Number of days in the given month
                    ;T: Timezone abbreviation, if known; otherwise the GMT offset.
                    Return SetError(1, 0, 0); FIXME: implement
                Case 'u'; U and u
                    ;u: Microseconds. Note that date() will always generate 000000 since it takes an int parameter, whereas DateTime::format() does support microseconds if DateTime was created with microseconds.
                    ;U: Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)
                    Return SetError(1, 0, 0); FIXME: implement
                Case 'v'
                    ;v: Milliseconds. Same note applies as for u.
                    $result &= $this.millisecond
                Case 'w'; W and w
                    ;w: Numeric representation of the day of the week
                    ;W: ISO 8601 week number of year, weeks starting on Monday
                    ;$result &= $matches[0] == 'w' ? $this.dayOfWeek : $this.weekOfYearIso;FIXME: weekofyearISO is not implemented
                    Local $aShards = $this.tsShards()
                    $result &= $matches[0] == 'w' ? $this.dayOfWeek : _WeekNumberISO($aShards[$__g_DateTime_ts_year], $aShards[$__g_DateTime_ts_month], $aShards[$__g_DateTime_ts_day])
                Case 'x'; X and x
                    ;x: An expanded full numeric representation if required, or a standard full numeral representation if possible (like Y). At least four digits. Years BCE are prefixed with a -. Years beyond (and including) 10000 are prefixed by a +.
                    ;X: An expanded full numeric representation of a year, at least 4 digits, with - for years BCE, and + for years CE.
                    Return SetError(1, 0, 0); FIXME: implement
                Case 'y'; Y and y
                    ;y: A two digit representation of a year
                    ;Y: A full numeric representation of a year, at least 4 digits, with - for years BCE.
                    If ($matches[0] == 'y') Then
                        Return SetError(1, 0, 0); FIXME: implement
                    Else
                        $result &= StringFormat('%04d', $this.year)
                    EndIf
                Case 'z'; Z and z
                    ;z: The day of the year (starting from 0)
                    ;Z: Timezone offset in seconds. The offset for timezones west of UTC is always negative, and for those east of UTC is always positive.
                    Return SetError(1, 0, 0); FIXME: implement
            EndSwitch
        WEnd
        Return StringRegExpReplace($result&StringMid($format, $lastMatchAt), '\\(.)', '$1')
    EndFunc

    Func startOfDay()
        $this.setTime(0, 0, 0, 0)
    EndFunc

    Func endOfDay()
        $this.setTime(23, 59, 59, 999)
    EndFunc

    Func startOfMonth()
        $this.setDate($this.year, $this.month, 1)
        $this.startOfDay()
    EndFunc

    Func endOfMonth()
        $this.setDate($this.year, $this.month, this.daysInMonth)
        $this.endOfDay()
    EndFunc

    Func startOfQuarter()
        Local $month = ($this.quarter - 1) * $__g_DateTime_MONTHS_PER_QUARTER + 1

        $this.setDate($this.year, $month, 1)
        $this.startOfDay()
    EndFunc

    Func endOfQuarter()
        $this.startOfQuarter()
        $this.addMonths($__g_DateTime_MONTHS_PER_QUARTER - 1)
        $this.endOfMonth()
    EndFunc

    Func startOfYear()
        $this.setDate($this.year, 1, 1)
        $this.startOfDay()
    EndFunc

    Func endOfYear()
        $this.setDate($this.year, 12, 31)
        $this.endOfDay()
    EndFunc

    Func startOfDecade()
        Local $year = $this.year
        $year = $year - Mod($year, $__g_DateTime_YEARS_PER_DECADE)
        $this.setDate($year, 1, 1)
        $this.startOfDay()
    EndFunc

    Func endOfDecade()
        Local $year = $this.year
        $year = $year - Mod($year, $__g_DateTime_YEARS_PER_DECADE) + $__g_DateTime_YEARS_PER_DECADE - 1
        $this.setDate($year, 12, 31)
        $this.endOfDay()
    EndFunc

    Func startOfCentury()
        Local $year = $this.year
        $year = $year - Mod($year - 1, $__g_DateTime_YEARS_PER_CENTURY)
        $this.setDate($year, 1, 1)
        $this.startOfDay()
    EndFunc

    Func endOfCentury()
        Local $year = $this.year
        $year = $year - 1 - Mod($year - 1, $__g_DateTime_YEARS_PER_CENTURY) + $__g_DateTime_YEARS_PER_CENTURY
        $this.setDate($year, 12, 31)
        $this.endOfDay()
    EndFunc

    Func startOfMillennium()
        ;FIXME
    EndFunc

    Func endOfMillennium()
        ;FIXME
    EndFunc

    Func startOfWeek()
        While (Not $this.dayOfWeek = $__g_DateTime_weekStartsAt)
            $this.subDay()
        WEnd

        $this.startOfDay()
    EndFunc

    Func endOfWeek()
        While (Not $this.dayOfWeek = $__g_DateTime_weekStartsAt)
            $this.addDay()
        WEnd

        $this.endOfDay()
    EndFunc

    Func startOfHour()
        $this.setTime($this.hour, 0, 0)
    EndFunc

    Func endOfHour()
        $this.setTime($this.hour, 59, 59, 999)
    EndFunc

    Func startOfMinute()
        $this.setTime($this.hour, $this.minute, 0)
    EndFunc

    Func endOfMinute()
        $this.setTime($this.hour, $this.minute, 59, 999)
    EndFunc

    Func startOfSecond()
        ;FIXME
    EndFunc

    Func endOfSecond()
        ;FIXME
    EndFunc

    Func startOf()
        ;FIXME
    EndFunc

    Func endOf()
        ;FIXME
    EndFunc

    Func midDay()
        $this.setTime($__g_DateTime_midDayAt, 0, 0)
    EndFunc

    #cs
    # Modify to the next occurrence of a given day of the week.
    # If no dayOfWeek is provided, modify to the next occurrence
    # of the current day of the week.  Use the supplied constants
    # to indicate the desired dayOfWeek, ex. static::MONDAY.
    #
    # @param int|null $dayOfWeek
    #ce
    Func next($dayOfWeek = Null)
        ;FIXME
    EndFunc

    Func nextOrPreviousDay($weekday = True, $forward = True)
        Local $step = $forward ? 1 : -1

        Do
            $this.addDay($step)
        Until Not ($weekday ? $this.isWeekend() : $this.isWeekday())
    EndFunc

    #cs
    # Go forward to the next weekday.
    #ce
    Func nextWeekday()
        $this.nextOrPreviousDay()
    EndFunc

    #cs
    # Go backward to the previous weekday.
    #ce
    Func previousWeekday()
        $this.nextOrPreviousDay(True, False)
    EndFunc

    #cs
    # Go forward to the next weekend day.
    #ce
    Func nextWeekendDay()
        $this.nextOrPreviousDay(False)
    EndFunc

    #cs
    # Go backward to the previous weekend day.
    #ce
    Func previousWeekendDay()
        $this.nextOrPreviousDay(False, False)
    EndFunc

    #cs
    # Modify to the previous occurrence of a given day of the week.
    # If no dayOfWeek is provided, modify to the previous occurrence
    # of the current day of the week.  Use the supplied constants
    # to indicate the desired dayOfWeek, ex. static::MONDAY.
    #
    # @param int|null $dayOfWeek
    #ce
    Func previous($dayOfWeek = Null)
        ;FIXME
    EndFunc

    Func firstOfMonth($dayOfWeek = null)
        ;FIXME
    EndFunc

    Func lastOfMonth($dayOfWeek = null)
        ;FIXME
    EndFunc

    Func isWeekend()
        Local $dow = $this.dayOfWeek
        For $weekendDay In $__g_DateTime_weekendDays
            If $weekendDay = $dow Then Return True
        Next

        Return False
    EndFunc

    Func isWeekday()
        return Not $this.isWeekend()
    EndFunc

    Func setDateTime($year, $month, $day, $hour, $minute, $second = 0, $milliseconds = 0)
        $this.setDate($year, $month, $day)
        $this.setTime($hour, $minute, $second, $milliseconds)
    EndFunc

    Func setDate($year, $month, $day)
        Local $aShards = $this.tsShards()
        $this.ts = StringFormat($__g_DateTime_sTsFormat, $year, $month, $day, $aShards[$__g_DateTime_ts_hour], $aShards[$__g_DateTime_ts_minute], $aShards[$__g_DateTime_ts_second], $aShards[$__g_DateTime_ts_millisecond])
    EndFunc

    Func setTime($hour, $minute, $second = 0, $milliseconds = 0)
        Local $aShards = $this.tsShards()
        $this.ts = StringFormat($__g_DateTime_sTsFormat, $aShards[$__g_DateTime_ts_year], $aShards[$__g_DateTime_ts_month], $aShards[$__g_DateTime_ts_day], $hour, $minute, $second, $milliseconds)
    EndFunc

    Func setTimeFromTimeString()
        ;FIXME
        ;_Date_Time_SystemTimeToArray
    EndFunc

    Func setTimezone($timezone)
        Local $tz = DateTimeZone($timezone)
        If @error <> 0 Then Return SetError(@error, @extended, 0)
        $this.tz = $tz
    EndFunc

    Func toDateString()
        ;FIXME
    EndFunc

    Func toDateTimeString()
        ;FIXME
    EndFunc

    Func toFormattedDateString()
        ;FIXME
    EndFunc

    Func getTimezone()
        ;FIXME
    EndFunc

    Func diff()
        ;FIXME
    EndFunc

    Func diffAsDateTimeInterval()
        ;FIXME
    EndFunc

    Func diffInYears()
        ;FIXME
    EndFunc

    Func diffInQuarters()
        ;FIXME
    EndFunc

    Func diffInMonths()
        ;FIXME
    EndFunc

    Func diffInWeeks()
        ;FIXME
    EndFunc

    Func diffInDays()
        ;FIXME
    EndFunc

    Func diffInHours()
        ;FIXME
    EndFunc

    Func diffInRealHours()
        ;FIXME
    EndFunc

    Func diffInMinutes()
        ;FIXME
    EndFunc

    Func diffInRealMinutes()
        ;FIXME
    EndFunc

    Func diffInSeconds()
        ;FIXME
    EndFunc

    Func diffInRealSeconds()
        ;FIXME
    EndFunc

    Func diffInMicroseconds()
        ;FIXME
    EndFunc

    Func diffInRealMicroseconds()
        ;FIXME
    EndFunc

    Func diffInMilliseconds()
        ;FIXME
    EndFunc

    Func diffInRealMilliseconds()
        ;FIXME
    EndFunc

    Func secondsSinceMidnight()
        ;FIXME
    EndFunc

    Func secondsUntilEndOfDay()
        ;FIXME
    EndFunc

    Func diffForHumans()
        ;FIXME
    EndFunc

    Func getMidDayAt()
        Return $__g_DateTime_midDayAt
    EndFunc

    Func isLeapYear()
        Return _DateIsLeapYear($this.year) = 1
    EndFunc

    Func isLongYear()
        Local $d = DateTime()
        $d.setDateTime($this.year, 12, 28, 0, 0, 0)
        $d.setTimezone($this.tz)
        Return $d.weekOfYear = 53
    EndFunc

    Func formatLocalized($format)
        Local $aShards = $this.tsShards()
        Local $tSystTime = DllStructCreate($tagSYSTEMTIME)
        $tSystTime.Year = $aShards[$__g_DateTime_ts_year]
        $tSystTime.Month = $aShards[$__g_DateTime_ts_month]
        $tSystTime.Dow = $this.dayOfWeek - 1
        $tSystTime.Day = $aShards[$__g_DateTime_ts_day]
        $tSystTime.Hour = $aShards[$__g_DateTime_ts_hour]
        $tSystTime.Minute = $aShards[$__g_DateTime_ts_minute]
        $tSystTime.Second = $aShards[$__g_DateTime_ts_second]
        $tSystTime.MSeconds = $aShards[$__g_DateTime_ts_millisecond]
        Local $formatted = _WinAPI_GetDateFormat(_WinAPI_GetThreadLocale(), $tSystTime, 0, $format)
        Return SetError(@error, @extended, $formatted)
    EndFunc

    Func isDST()
        Return $this.dst
    EndFunc
EndClass
