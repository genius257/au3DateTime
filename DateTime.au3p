#AutoIt3Wrapper_Run_AU3Check=N

#include-once
; https://github.com/forcedotcom/dataloader/blob/master/windows-dependencies/autoit/Include/Date.au3
#include <Date.au3>
#include <WinAPILocale.au3>

Global Const $__g_DateTime_sTsFormat = '%04d-%02d-%02d %02d:%02d:%02d.%03d'
Global Const $__g_DateTime_sTsPattern = '^(\d{4})-(\d{2})-(\d{2}) (\d{2}):(\d{2}):(\d{2}).(\d{3})$'
Global Const $__g_DateTime_YEARS_PER_MILLENNIUM = 1000
Global Const $__g_DateTime_YEARS_PER_CENTURY = 100
Global Const $__g_DateTime_YEARS_PER_DECADE = 10
Global Const $__g_DateTime_MONTHS_PER_YEAR = 12
Global Const $__g_DateTime_MONTHS_PER_QUARTER = 3
Global Const $__g_DateTime_WEEKS_PER_YEAR = 52
Global Const $__g_DateTime_WEEKS_PER_MONTH = 4
Global Const $__g_DateTime_DAYS_PER_YEAR = 365
Global Const $__g_DateTime_DAYS_PER_WEEK = 7
Global Const $__g_DateTime_HOURS_PER_DAY = 24
Global Const $__g_DateTime_MINUTES_PER_HOUR = 60
Global Const $__g_DateTime_SECONDS_PER_MINUTE = 60
Global Const $__g_DateTime_MILLISECONDS_PER_MONUTE = 1000
Global Const $__g_DateTime_MICROSECONDS_PER_MILLISECOND = 1000
Global Const $__g_DateTime_MICROSECONDS_PER_SECOND = 1000000
Global Const $__g_DateTime_WEEK_DAY_AUTO = 'auto'
Global Enum $__g_DateTime_ts_year, $__g_DateTime_ts_month, $__g_DateTime_ts_day, $__g_DateTime_ts_hour, $__g_DateTime_ts_minute, $__g_DateTime_ts_second, $__g_DateTime_ts_millisecond
Global Enum $__g_DateTime_SUNDAY = 1, $__g_DateTime_MONDAY, $__g_DateTime_TUESDAY, $__g_DateTime_WEDNESDAY, $__g_DateTime_THURSDAY, $__g_DateTime_FRIDAY, $__g_DateTime_SATURDAY
Global $__g_DateTime_weekStartsAt = $__g_DateTime_MONDAY
Global $__g_DateTime_weekEndsAt = $__g_DateTime_SUNDAY
Global $__g_DateTime_weekendDays = [$__g_DateTime_SATURDAY, $__g_DateTime_SUNDAY]
Global $__g_DateTime_monthsOverflow = True
Global $__g_DateTime_yearsOverflow = True
Global $__g_DateTime_midDayAt = 12

Class DateTime
    $ts = Null
    $tz = Null

    Get Func year()
        Return $this.tsShards()[$__g_DateTime_ts_year]
        Return Int(StringMid($this.ts, 1, 4), 1)
    EndFunc

    Set Func year($value)
        Local $aShards = $this.tsShards()
        $this.setDate($value, $aShards[$__g_DateTime_ts_month], $aShards[$__g_DateTime_ts_day])
    EndFunc

    Get Func month()
        Return Int($this.tsShards()[$__g_DateTime_ts_month], 1)
    EndFunc

    Set Func month($value)
        Local $aShards = $this.tsShards()
        $this.setDate($aShards[$__g_DateTime_ts_year], $value, $aShards[$__g_DateTime_ts_day])
    EndFunc

    Get Func day()
        Return Int($this.tsShards()[$__g_DateTime_ts_day], 1)
    EndFunc

    Set Func day($value)
        Local $aShards = $this.tsShards()
        $this.setDate($aShards[$__g_DateTime_ts_year], $aShards[$__g_DateTime_ts_month], $value)
    EndFunc

    Get Func dayOfWeek()
        Local $aShards = $this.tsShards()
        ;_DateDayOfWeek()
        Return _DateToDayOfWeek($aShards[$__g_DateTime_ts_year], $aShards[$__g_DateTime_ts_month], $aShards[$__g_DateTime_ts_day])
    EndFunc

    Get Func dayOfWeekIso()
        Local $aShards = $this.tsShards()
        Return _DateToDayOfWeekISO($aShards[$__g_DateTime_ts_year], $aShards[$__g_DateTime_ts_month], $aShards[$__g_DateTime_ts_day])
    EndFunc

    Get Func dayOfYear()
        Local $aShards = $this.tsShards()
        Local $iDay = 0
        Local $i
        For $i = 1 To $aShards[$__g_DateTime_ts_month]-1 Step +1
            $iDay += _DateDaysInMonth($aShards[$__g_DateTime_ts_year], $i)
        Next
        $iDay += $aShards[$__g_DateTime_ts_day]
        Return $iDay
    EndFunc

    Set Func dayOfYear()
        ;FIXME
    EndFunc

    Get Func daysInMonth()
        Local $aShards = $this.tsShards()
        Return _DateDaysInMonth($aShards[$__g_DateTime_ts_year], $aShards[$__g_DateTime_ts_month])
    EndFunc

    Set Func daysInMonth()
        ;FIXME
    EndFunc

    Get Func dst()
        ;FIXME
        ; GetTimeZoneInformation
        ; https://docs.microsoft.com/en-us/windows/win32/api/timezoneapi/nf-timezoneapi-gettimezoneinformation
    EndFunc

    Set Func dst()
        ;FIXME
    EndFunc

    Get Func hour()
        Return Int($this.tsShards()[$__g_DateTime_ts_hour], 1)
    EndFunc

    Set Func hour($value)
        Local $aShards = $this.tsShards()
        $this.setTime($aShards[$value, $aShards[$__g_DateTime_ts_minute], $aShards[$__g_DateTime_ts_second], $aShards[$__g_DateTime_ts_millisecond])
    EndFunc

    Get Func minute()
        Return Int($this.tsShards()[$__g_DateTime_ts_minute], 1)
    EndFunc

    Set Func minute($value)
        Local $aShards = $this.tsShards()
        $this.setTime($aShards[$__g_DateTime_ts_hour], $value, $aShards[$__g_DateTime_ts_second], $aShards[$__g_DateTime_ts_millisecond])
    EndFunc

    Get Func second()
        Return Int($this.tsShards()[$__g_DateTime_ts_second], 1)
    EndFunc

    Set Func second($value)
        Local $aShards = $this.tsShards()
        $this.setTime($aShards[$__g_DateTime_ts_hour], $aShards[$__g_DateTime_ts_minute], $value, $aShards[$__g_DateTime_ts_millisecond])
    EndFunc

    Get Func millisecond()
        Return $this.tsShards()[$__g_DateTime_ts_millisecond]
    EndFunc

    Set Func millisecond($value)
        Local $aShards = $this.tsShards()
        $this.setTime($aShards[$__g_DateTime_ts_hour], $aShards[$__g_DateTime_ts_minute], $aShards[$__g_DateTime_ts_second], $value)
    EndFunc

    Get Func timestamp()
        Local $aShards = $this.tsShards()
        Local $aSysTimeInfo = _Date_Time_GetTimeZoneInformation()
        Local $utcTime = ""

        If Int($aShards[$__g_DateTime_ts_year], 1) < 1970 Then Return SetError(1, 0, -1)

        Local $sDate = StringFormat('%04d/%02d/%02d %02d:%02d:%02d', $aShards[$__g_DateTime_ts_year], $aShards[$__g_DateTime_ts_month], $aShards[$__g_DateTime_ts_day], $aShards[$__g_DateTime_ts_hour], $aShards[$__g_DateTime_ts_minute], $aShards[$__g_DateTime_ts_second])

        If $aSysTimeInfo[0] = 2 Then ; if daylight saving time is active
            $utcTime = _DateAdd('n', $aSysTimeInfo[1] + $aSysTimeInfo[7], $sDate) ; account for time zone and daylight saving time
        Else
            $utcTime = _DateAdd('n', $aSysTimeInfo[1], $sDate) ; account for time zone
        EndIf

        Return _DateDiff('s', "1970/01/01 00:00:00", $utcTime)
    EndFunc

    Set Func timestamp()
        ;FIXME
    EndFunc

    Get Func timezone()
        ;FIXME
    EndFunc

    Set Func timezone()
        ;FIXME
    EndFunc

    Get Func utc()
        ;FIXME
    EndFunc

    Set Func utc()
        ;FIXME
    EndFunc

    Get Func weekNumberInMonth()
        Local $aShards = $this.tsShards()
        Ceiling(($this.day + _DateToDayOfWeekISO($aShards[$__g_DateTime_ts_year], $aShards[$__g_DateTime_ts_month], $aShards[$__g_DateTime_ts_day]) - 1) / $__g_DateTime_DAYS_PER_WEEK)
    EndFunc

    Get Func weekOfMonth()
        Return Ceiling($this.day / $__g_DateTime_DAYS_PER_WEEK)
        ;Local $aShards = $this.tsShards()
        ;Local $first = _WeekNumberISO($aShards[$__g_DateTime_ts_year], $aShards[$__g_DateTime_ts_month], 1)
        ;Local $time = _WeekNumberISO($aShards[$__g_DateTime_ts_year], $aShards[$__g_DateTime_ts_month], $aShards[$__g_DateTime_ts_day])
        ;Local $first = _WeekNumber($aShards[$__g_DateTime_ts_year], $aShards[$__g_DateTime_ts_month], 1)
        ;Local $time = _WeekNumber($aShards[$__g_DateTime_ts_year], $aShards[$__g_DateTime_ts_month], $aShards[$__g_DateTime_ts_day])
        ;Return $time - $first + 1
    EndFunc

    Get Func weekOfYear()
        Local $aShards = $this.tsShards()
        Return _WeekNumberISO($aShards[$__g_DateTime_ts_year], $aShards[$__g_DateTime_ts_month], $aShards[$__g_DateTime_ts_day])
    EndFunc

    Get Func yearIso()
        Local $aShards = $this.tsShards()
        Return (_WeekNumberISO($aShards[$__g_DateTime_ts_year], $aShards[$__g_DateTime_ts_month], $aShards[$__g_DateTime_ts_day]) < 10 And $aShards[$__g_DateTime_ts_month] == 12) ? $aShards[$__g_DateTime_ts_year]+1 : Int($aShards[$__g_DateTime_ts_year], 1)
    EndFunc

    Get Func century()
        Local $factor = 1
        Local $year = $this.year
        If ($year < 0) Then
            $year = -$year
            $factor = -1
        EndIf

        Return $factor * Ceiling($year / $__g_DateTime_YEARS_PER_CENTURY)
        ;Local $aShards = $this.tsShards()
        ;Return Ceiling($aShards[$__g_DateTime_ts_year] / 100)
    EndFunc

    Get Func decade()
        Local $aShards = $this.tsShards()
        Return Ceiling($aShards[$__g_DateTime_ts_year] / $__g_DateTime_YEARS_PER_DECADE)
    EndFunc

    Get Func quarter()
        Local $aShards = $this.tsShards()
        Return Ceiling($aShards[$__g_DateTime_ts_month] / $__g_DateTime_MONTHS_PER_QUARTER)
    EndFunc

    Get Func millennium()
        Local $factor = 1
        Local $year = this.year
        If ($year < 0) Then
            $year = -$year
            $factor = -1
        EndIf

        Return $factor * Ceiling($year / $__g_DateTime_YEARS_PER_MILLENNIUM)
    EndFunc

    Get Func daysInYear()
        Return $this.isLeapYear() ? 366 : 365
    EndFunc

    Get Func age()
        Return $this.diffInYears()
    EndFunc

    Get Func localeDayOfWeek()
        Return $this.formatLocalized('dddd')
    EndFunc

    Get Func shortLocaleDayOfWeek()
        Return $this.formatLocalized('ddd')
    EndFunc

    Get Func localeMonth()
        Return $this.formatLocalized('MMMM')
    EndFunc

    Get Func shortLocaleMonth()
        Return $this.formatLocalized('MMM')
    EndFunc

    Func __construct($ts = 'now')
        ;$ts = $ts == 'now' ? _Now() : _DateTimeFormat($ts, 0)
        $ts = $ts == 'now' ? StringFormat($__g_DateTime_sTsFormat, @YEAR, @MON, @MDAY, @HOUR, @MIN, @SEC, @MSEC) : _DateTimeFormat($ts, 0)

        $this.ts = $ts
    EndFunc

    #cs
    Func __destruct()
        ; Destructor code here.
    EndFunc
    #ce

    Func tsShards()
        Return StringRegExp($this.ts, $__g_DateTime_sTsPattern, 1)
    EndFunc

    #cs
    # @param DateInterval $value
    #ce
    Func add($value)
        ;FIXME
    EndFunc

    Func addCenturies()
        ;FIXME
    EndFunc

    Func addCentury()
        ;FIXME
    EndFunc

    Func addDay()
        ;FIXME
    EndFunc

    Func addDays()
        ;FIXME
    EndFunc

    Func addHour()
        ;FIXME
    EndFunc

    Func addHours()
        ;FIXME
    EndFunc

    Func addMinute()
        ;FIXME
    EndFunc

    Func addMinutes()
        ;FIXME
    EndFunc

    Func addMonth()
        ;FIXME
    EndFunc

    Func addMonthNoOverflow()
        ;FIXME
    EndFunc

    Func addMonths()
        ;FIXME
    EndFunc

    Func addMonthsNoOverflow()
        ;FIXME
    EndFunc

    Func addMonthsWithOverflow()
        ;FIXME
    EndFunc

    Func addMonthWithOverflow()
        ;FIXME
    EndFunc

    Func addQuarter()
        ;FIXME
    EndFunc

    Func addQuarters()
        ;FIXME
    EndFunc

    Func addRealHour()
        ;FIXME
    EndFunc

    Func addRealHours()
        ;FIXME
    EndFunc

    Func addRealMinute()
        ;FIXME
    EndFunc

    Func addRealMinutes()
        ;FIXME
    EndFunc

    Func addRealSecond()
        ;FIXME
    EndFunc

    Func addRealSeconds()
        ;FIXME
    EndFunc

    Func addSecond()
        ;FIXME
    EndFunc

    Func addSeconds()
        ;FIXME
    EndFunc

    Func addWeek()
        ;FIXME
    EndFunc

    Func addWeeks()
        ;FIXME
    EndFunc

    Func addWeekday()
        ;FIXME
    EndFunc

    Func addWeekdays()
        ;FIXME
    EndFunc

    Func addYear()
        ;FIXME
    EndFunc

    Func addYearNoOverflow()
        ;FIXME
    EndFunc

    Func addYears()
        ;FIXME
    EndFunc

    Func addYearsNoOverflow()
        ;FIXME
    EndFunc

    Func addYearsWithOverflow()
        ;FIXME
    EndFunc

    Func addYearWithOverflow()
        ;FIXME
    EndFunc

    Func copy()
        Local $clone = DateTime()
        $clone.ts = $this.ts
        $clone.tz = $this.tz
        Return $clone
    EndFunc

    Func format()
        ;FIXME: implement
    EndFunc

    Func startOfDay()
        $this.setTime(0, 0, 0, 0)
    EndFunc

    Func endOfDay()
        $this.setTime(23, 59, 59, 999)
    EndFunc

    Func startOfMonth()
        $this.setDate($this.year, $this.month, 1)
        $this.startOfDay()
    EndFunc

    Func endOfMonth()
        $this.setDate($this.year, $this.month, this.daysInMonth)
        $this.endOfDay()
    EndFunc

    Func startOfQuarter()
        Local $month = ($this.quarter - 1) * $__g_DateTime_MONTHS_PER_QUARTER + 1

        $this.setDate($this.year, $month, 1)
        $this.startOfDay()
    EndFunc

    Func endOfQuarter()
        $this.startOfQuarter()
        $this.addMonths($__g_DateTime_MONTHS_PER_QUARTER - 1)
        $this.endOfMonth()
    EndFunc

    Func startOfYear()
        $this.setDate($this.year, 1, 1)
        $this.startOfDay()
    EndFunc

    Func endOfYear()
        $this.setDate($this.year, 12, 31)
        $this.endOfDay()
    EndFunc

    ;FIXME
    ;startOfDecade
    ;startOfCentury
    ;startOfMillennium
    ;startOfWeek
    ;startOfHour
    ;startOfMinute
    ;startOfSecond
    ;startOf

    Func setDateTime($year, $month, $day, $hour, $minute, $second = 0, $milliseconds = 0)
        $this.setDate($year, $month, $day)
        $this.setTime($hour, $minute, $second, $milliseconds)
    EndFunc

    Func setDate($year, $month, $day)
        Local $aShards = $this.tsShards()
        $this.ts = StringFormat($__g_DateTime_sTsFormat, $year, $month, $day, $aShards[$__g_DateTime_ts_hour], $aShards[$__g_DateTime_ts_minute], $aShards[$__g_DateTime_ts_second], $aShards[$__g_DateTime_ts_millisecond])
    EndFunc

    Func setTime($hour, $minute, $second = 0, $milliseconds = 0)
        Local $aShards = $this.tsShards()
        $this.ts = StringFormat($__g_DateTime_sTsFormat, $aShards[$__g_DateTime_ts_year], $aShards[$__g_DateTime_ts_month], $aShards[$__g_DateTime_ts_day], $hour, $minute, $second, $milliseconds)
    EndFunc

    Func setTimeFromTimeString()
        ;FIXME
    EndFunc

    Func setTimezone()
        ;FIXME
    EndFunc

    Func toDateString()
        ;FIXME
    EndFunc

    Func toDateTimeString()
        ;FIXME
    EndFunc

    Func toFormattedDateString()
        ;FIXME
    EndFunc

    Func getTimezone()
        ;FIXME
    EndFunc

    Func diff()
        ;FIXME
    EndFunc

    Func diffAsDateTimeInterval()
        ;FIXME
    EndFunc

    Func diffInYears()
        ;FIXME
    EndFunc

    Func diffInQuarters()
        ;FIXME
    EndFunc

    Func diffInMonths()
        ;FIXME
    EndFunc

    Func diffInWeeks()
        ;FIXME
    EndFunc

    Func diffInDays()
        ;FIXME
    EndFunc

    Func diffInHours()
        ;FIXME
    EndFunc

    Func diffInRealHours()
        ;FIXME
    EndFunc

    Func diffInMinutes()
        ;FIXME
    EndFunc

    Func diffInRealMinutes()
        ;FIXME
    EndFunc

    Func diffInSeconds()
        ;FIXME
    EndFunc

    Func diffInRealSeconds()
        ;FIXME
    EndFunc

    Func diffInMicroseconds()
        ;FIXME
    EndFunc

    Func diffInRealMicroseconds()
        ;FIXME
    EndFunc

    Func diffInMilliseconds()
        ;FIXME
    EndFunc

    Func diffInRealMilliseconds()
        ;FIXME
    EndFunc

    Func secondsSinceMidnight()
        ;FIXME
    EndFunc

    Func secondsUntilEndOfDay()
        ;FIXME
    EndFunc

    Func diffForHumans()
        ;FIXME
    EndFunc

    Func getMidDayAt()
        Return $__g_DateTime_midDayAt
    EndFunc

    Func isLeapYear()
        Return _DateIsLeapYear($this.year) = 1
    EndFunc

    Func isLongYear()
        Local $d = DateTime()
        $d.setDateTime($this.year, 12, 28, 0, 0, 0)
        $d.setTimezone($this.tz)
        Return $d.weekOfYear = 53
    EndFunc

    Func formatLocalized($format)
        Local $aShards = $this.tsShards()
        Local $tSystTime = DllStructCreate($tagSYSTEMTIME)
        $tSystTime.Year = $aShards[$__g_DateTime_ts_year]; $this.year
        $tSystTime.Month = $aShards[$__g_DateTime_ts_month]; $this.month
        $tSystTime.Dow = $this.dayOfWeek - 1
        $tSystTime.Day = $aShards[$__g_DateTime_ts_day]; $this.day
        $tSystTime.Hour = $aShards[$__g_DateTime_ts_hour]; $this.hour
        $tSystTime.Minute = $aShards[$__g_DateTime_ts_minute]; $this.minute
        $tSystTime.Second = $aShards[$__g_DateTime_ts_second]; $this.second
        $tSystTime.MSeconds = $aShards[$__g_DateTime_ts_millisecond]; $this.millisecond
        Local $formatted = _WinAPI_GetDateFormat(_WinAPI_GetThreadLocale(), $tSystTime, 0, $format)
        Return SetError(@error, @extended, $formatted)
    EndFunc
EndClass
